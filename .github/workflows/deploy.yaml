name: Auto Deploy after push

on:
  push:
    branches:
      - deploy-be-test

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name : Docker Environment Varibale File 
        run: echo -e "REACT_APP_GITHUB_AUTH_URL=${{secrets.REACT_APP_GITHUB_AUTH_URL}}\n
                      REACT_APP_KAKAO_AUTH_URL=${{secrets.REACT_APP_KAKAO_AUTH_URL}}\n
                      REACT_APP_NAVER_AUTH_URL=${{secrets.REACT_APP_NAVER_AUTH_URL}}\n
                      REACT_APP_PUBLIC_URL=${{secrets.REACT_APP_PUBLIC_URL}}\n" > ./.env
      
      - name: Install npm package
        run: npm install --force
    
      - name: Build
        run: npm run build

      # GitHub Actions CLI 환경에서 S3 사용자 권한의 aws 접속
      - name: Configure AWS credentials 
        uses: aws-actions/configure-aws-credentials@v1 
        with: 
          aws-access-key-id: ${{ secrets.AWS_BE_S3_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_BE_S3_SECRET_ACCESS_KEY }} 
          aws-region: ap-northeast-2

      # react 빌드한 /build를 s3로 업로드
      - name: Upload /build to S3
        env:
          BUCKET_NAME: ${{ secrets.AWS_BE_S3_BUCKET_NAME }}
        run: |
          aws s3 cp --recursive --region ap-northeast-2 build s3://$BUCKET_NAME
          
      # 업로드한 s3 파일을 각 CDN 캐시 무효화하여 리프레시 하기
      - name: CloudFront Invalidation
        env:
          CLOUD_FRONT_ID: ${{ secrets.AWS_BE_CLOUD_FRONT_ID}}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUD_FRONT_ID --paths "/*"

#       - name: Transfer to S3 for serving static
#         uses: jakejarvis/s3-sync-action@master
#         with:
#           args: --acl public-read --follow-symlinks --delete
#         env:
#           AWS_REGION: ${{ secrets.AWS_BUCKET_REGION }}
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_S3_BUCKET: ${{ secrets.AWS_BUCKET_NAME }}
#           SOURCE_DIR: "build" 
